#version 430 compatibility
#extension GL_ARB_COMPUTE_SHADER : enable
#extension GL_ARB_SHADER_STORAGE_BUFFER_OBJECT : enable

struct Particle
{
	vec3 mPos;
	float speed;
	float life;
	float currentlife;
	vec3 direction;
};

layout(std430, binding = 2) buffer ParticleDataBlock
{
	Particle each_particle[];
};

layout(std430, binding = 3) buffer PosBlock
{
	vec4 mPos[];
};

layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

uniform float DeltaTime;
uniform vec2 SpeedRange;
uniform vec2 LifeRange;
uniform bool Pause;
uniform vec3 Center;
uniform vec3 Direction;
uniform bool Active;

highp float rand(vec2 co)
{
	highp float a = 12.9898;
	highp float b = 78.233;
	highp float c = 43758.5453;
	highp float dt = dot(co.xy, vec2(a, b));
	highp float sn = mod(dt, 3.14);
	return fract(sin(sn) * c);
}

void main()
{
	uint gid = gl_GlobalInvocationID.x;
	
	each_particle[gid].currentlife = each_particle[gid].currentlife - DeltaTime;
	vec3 pos = each_particle[gid].mPos;

	if(!Pause)
	{
		if (each_particle[gid].currentlife > 0)
		{
			float vel = each_particle[gid].speed;
			vec3 dir = each_particle[gid].direction;

			pos += vel * dir * DeltaTime;
		}
		else if(Active)
		{
			pos = vec3(rand(pos.xy),rand(pos.yz),rand(pos.xz)) * 2.0f - 1.0f;
			each_particle[gid].life = rand(pos.xy) * (LifeRange.y - LifeRange.x) + LifeRange.x;
			each_particle[gid].currentlife = each_particle[gid].life;
			each_particle[gid].speed = rand(pos.yz) * (SpeedRange.y - SpeedRange.x) + SpeedRange.x;
			each_particle[gid].direction = normalize(Direction);
		}		
		else
		{
			each_particle[gid].life = 0.0f;
			each_particle[gid].currentlife = 0.0f;
			each_particle[gid].speed = 0.0f;
			each_particle[gid].direction = vec3(0.0f);
			each_particle[gid].mPos = vec3(0.0f);
		}
	}

	each_particle[gid].mPos = pos;
	mPos[gid] = vec4(pos,1.0);
	mPos[gid].w = each_particle[gid].currentlife / each_particle[gid].life;
}